
Measure_the_Distance_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000025e8  0000267c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  00002696  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d8  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000662f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009775  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ab3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 12 	call	0x24da	; 0x24da <main>
      8a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_CAPT_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     cc8:	80 91 7a 00 	lds	r24, 0x007A
     ccc:	90 91 7b 00 	lds	r25, 0x007B
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	29 f0       	breq	.+10     	; 0xcde <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		/* another method to call the function using pointer to function g_callBackPtr(); */
		(*g_callBackPtr)();
     cd4:	e0 91 7a 00 	lds	r30, 0x007A
     cd8:	f0 91 7b 00 	lds	r31, 0x007B
     cdc:	09 95       	icall
	}
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <Icu_init>:
 * 					4. Initialize Timer1 Registers
 * [Args]  : pointer to constant structure
 * [RUTURN]: Void
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <Icu_init+0x6>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_SetPinDir(ICP_PORT_ID, ICP_PIN_ID, pin_input);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	66 e0       	ldi	r22, 0x06	; 6
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_SetPinDir>

	/* Timer1 always operates in Normal Mode */
	TCCR1A_REG = (1<<TCCR1A_FOC1A) | (1<<TCCR1A_FOC1B);
     d1c:	ef e4       	ldi	r30, 0x4F	; 79
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8c e0       	ldi	r24, 0x0C	; 12
     d22:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B_REG = (TCCR1B_REG & 0xF8) | (Config_Ptr->clock);
     d24:	ae e4       	ldi	r26, 0x4E	; 78
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ee e4       	ldi	r30, 0x4E	; 78
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	98 2f       	mov	r25, r24
     d30:	98 7f       	andi	r25, 0xF8	; 248
     d32:	e9 81       	ldd	r30, Y+1	; 0x01
     d34:	fa 81       	ldd	r31, Y+2	; 0x02
     d36:	80 81       	ld	r24, Z
     d38:	89 2b       	or	r24, r25
     d3a:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG = (TCCR1B_REG & 0xBF) | ((Config_Ptr->edge)<<6);
     d3c:	ae e4       	ldi	r26, 0x4E	; 78
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	28 2f       	mov	r18, r24
     d48:	2f 7b       	andi	r18, 0xBF	; 191
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	00 24       	eor	r0, r0
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	07 94       	ror	r0
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	07 94       	ror	r0
     d62:	98 2f       	mov	r25, r24
     d64:	80 2d       	mov	r24, r0
     d66:	82 2b       	or	r24, r18
     d68:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1_REG = 0;
     d6a:	ec e4       	ldi	r30, 0x4C	; 76
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	11 82       	std	Z+1, r1	; 0x01
     d70:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1_REG = 0;
     d72:	e6 e4       	ldi	r30, 0x46	; 70
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	11 82       	std	Z+1, r1	; 0x01
     d78:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK_REG |= (1<<TIMSK_TICIE1);
     d7a:	a9 e5       	ldi	r26, 0x59	; 89
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e9 e5       	ldi	r30, 0x59	; 89
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	8c 93       	st	X, r24
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <Icu_setCallBack>:
 * [DISCRIPTION]  : Function to set the Call Back function address.
 * [Args]  : pointer to function tack void and return void
 * [RUTURN]: Void
 */
void Icu_setCallBack(void(*Ptr_To_fun)(void))
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <Icu_setCallBack+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = (volatile void *) Ptr_To_fun;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	90 93 7b 00 	sts	0x007B, r25
     da8:	80 93 7a 00 	sts	0x007A, r24
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <Icu_setEdgeDetectionType>:
 * [DISCRIPTION]  : Function to set the required edge detection.
 * [Args]  : enum
 * [RUTURN]: Void
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType edgeType)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG = (TCCR1B_REG & 0xBF) | ((edgeType)<<6);
     dc2:	ae e4       	ldi	r26, 0x4E	; 78
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ee e4       	ldi	r30, 0x4E	; 78
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	28 2f       	mov	r18, r24
     dce:	2f 7b       	andi	r18, 0xBF	; 191
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	00 24       	eor	r0, r0
     dd8:	96 95       	lsr	r25
     dda:	87 95       	ror	r24
     ddc:	07 94       	ror	r0
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	07 94       	ror	r0
     de4:	98 2f       	mov	r25, r24
     de6:	80 2d       	mov	r24, r0
     de8:	82 2b       	or	r24, r18
     dea:	8c 93       	st	X, r24
}
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <Icu_getInputCaptureValue>:
 *                  The value stored at Input Capture Register ICR1
 * [Args]  : Void
 * [RUTURN]: uint16
 */
uint16 Icu_getInputCaptureValue(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
     dfc:	e6 e4       	ldi	r30, 0x46	; 70
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <Icu_clearTimerValue>:
 * [DISCRIPTION]  : Function to clear the Timer1 Value to start count from ZERO
 * [Args]  : Void
 * [RUTURN]: Void
 */
void Icu_clearTimerValue(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
     e12:	ec e4       	ldi	r30, 0x4C	; 76
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	11 82       	std	Z+1, r1	; 0x01
     e18:	10 82       	st	Z, r1
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <Icu_DeInit>:
 * [DISCRIPTION]  : Function to disable the Timer1 to stop the ICU Driver
 * [Args]  : Void
 * [RUTURN]: Void
 */
void Icu_DeInit(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A_REG = 0;
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
     e2e:	ee e4       	ldi	r30, 0x4E	; 78
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
	TCNT1_REG = 0;
     e34:	ec e4       	ldi	r30, 0x4C	; 76
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	11 82       	std	Z+1, r1	; 0x01
     e3a:	10 82       	st	Z, r1
	ICR1_REG = 0;
     e3c:	e6 e4       	ldi	r30, 0x46	; 70
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	11 82       	std	Z+1, r1	; 0x01
     e42:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK_REG &= ~(1<<TIMSK_TICIE1);
     e44:	a9 e5       	ldi	r26, 0x59	; 89
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <GI_Enable>:
 * [FUNCTION NAME]: GI_Enable
 * [DISCRIPTION]  : This Function used to enable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Enable(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I);
     e60:	af e5       	ldi	r26, 0x5F	; 95
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ef e5       	ldi	r30, 0x5F	; 95
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8c 93       	st	X, r24
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <GI_Disable>:
 * [FUNCTION NAME]: GI_Disable
 * [DISCRIPTION]  : This Function used to Disable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Disable(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I);
     e7c:	af e5       	ldi	r26, 0x5F	; 95
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e5       	ldi	r30, 0x5F	; 95
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 77       	andi	r24, 0x7F	; 127
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <GPIO_SetPinDir+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <GPIO_SetPinDir+0x8>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	08 f0       	brcs	.+2      	; 0xeac <GPIO_SetPinDir+0x1c>
     eaa:	d5 c0       	rjmp	.+426    	; 0x1056 <GPIO_SetPinDir+0x1c6>
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	88 30       	cpi	r24, 0x08	; 8
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <GPIO_SetPinDir+0x24>
     eb2:	d1 c0       	rjmp	.+418    	; 0x1056 <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3d 83       	std	Y+5, r19	; 0x05
     ebc:	2c 83       	std	Y+4, r18	; 0x04
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <GPIO_SetPinDir+0x3a>
     ec8:	43 c0       	rjmp	.+134    	; 0xf50 <GPIO_SetPinDir+0xc0>
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	3d 81       	ldd	r19, Y+5	; 0x05
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	2c f4       	brge	.+10     	; 0xede <GPIO_SetPinDir+0x4e>
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	71 f0       	breq	.+28     	; 0xef8 <GPIO_SetPinDir+0x68>
     edc:	bc c0       	rjmp	.+376    	; 0x1056 <GPIO_SetPinDir+0x1c6>
     ede:	2c 81       	ldd	r18, Y+4	; 0x04
     ee0:	3d 81       	ldd	r19, Y+5	; 0x05
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <GPIO_SetPinDir+0x5a>
     ee8:	5f c0       	rjmp	.+190    	; 0xfa8 <GPIO_SetPinDir+0x118>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <GPIO_SetPinDir+0x66>
     ef4:	85 c0       	rjmp	.+266    	; 0x1000 <GPIO_SetPinDir+0x170>
     ef6:	af c0       	rjmp	.+350    	; 0x1056 <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	a1 f4       	brne	.+40     	; 0xf26 <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
     efe:	aa e3       	ldi	r26, 0x3A	; 58
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <GPIO_SetPinDir+0x8c>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <GPIO_SetPinDir+0x88>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	98 c0       	rjmp	.+304    	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
     f26:	aa e3       	ldi	r26, 0x3A	; 58
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e3       	ldi	r30, 0x3A	; 58
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <GPIO_SetPinDir+0xb4>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <GPIO_SetPinDir+0xb0>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	83 c0       	rjmp	.+262    	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	a1 f4       	brne	.+40     	; 0xf7e <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
     f56:	a7 e3       	ldi	r26, 0x37	; 55
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e7 e3       	ldi	r30, 0x37	; 55
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_SetPinDir+0xe4>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_SetPinDir+0xe0>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	6c c0       	rjmp	.+216    	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
     f7e:	a7 e3       	ldi	r26, 0x37	; 55
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e7 e3       	ldi	r30, 0x37	; 55
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <GPIO_SetPinDir+0x10c>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <GPIO_SetPinDir+0x108>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	57 c0       	rjmp	.+174    	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
     fae:	a4 e3       	ldi	r26, 0x34	; 52
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e4 e3       	ldi	r30, 0x34	; 52
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_SetPinDir+0x13c>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_SetPinDir+0x138>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	40 c0       	rjmp	.+128    	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
     fd6:	a4 e3       	ldi	r26, 0x34	; 52
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e4 e3       	ldi	r30, 0x34	; 52
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <GPIO_SetPinDir+0x164>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <GPIO_SetPinDir+0x160>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	2b c0       	rjmp	.+86     	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	a1 f4       	brne	.+40     	; 0x102e <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    1006:	a1 e3       	ldi	r26, 0x31	; 49
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e1 e3       	ldi	r30, 0x31	; 49
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_SetPinDir+0x194>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_SetPinDir+0x190>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <GPIO_SetPinDir+0x1bc>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <GPIO_SetPinDir+0x1b8>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_ReadPin+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_ReadPin+0x8>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1078:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	08 f0       	brcs	.+2      	; 0x1082 <GPIO_ReadPin+0x1c>
    1080:	84 c0       	rjmp	.+264    	; 0x118a <GPIO_ReadPin+0x124>
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	08 f0       	brcs	.+2      	; 0x108a <GPIO_ReadPin+0x24>
    1088:	80 c0       	rjmp	.+256    	; 0x118a <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3d 83       	std	Y+5, r19	; 0x05
    1092:	2c 83       	std	Y+4, r18	; 0x04
    1094:	4c 81       	ldd	r20, Y+4	; 0x04
    1096:	5d 81       	ldd	r21, Y+5	; 0x05
    1098:	41 30       	cpi	r20, 0x01	; 1
    109a:	51 05       	cpc	r21, r1
    109c:	79 f1       	breq	.+94     	; 0x10fc <GPIO_ReadPin+0x96>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 05       	cpc	r25, r1
    10a6:	34 f4       	brge	.+12     	; 0x10b4 <GPIO_ReadPin+0x4e>
    10a8:	2c 81       	ldd	r18, Y+4	; 0x04
    10aa:	3d 81       	ldd	r19, Y+5	; 0x05
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	69 f0       	breq	.+26     	; 0x10cc <GPIO_ReadPin+0x66>
    10b2:	6b c0       	rjmp	.+214    	; 0x118a <GPIO_ReadPin+0x124>
    10b4:	4c 81       	ldd	r20, Y+4	; 0x04
    10b6:	5d 81       	ldd	r21, Y+5	; 0x05
    10b8:	42 30       	cpi	r20, 0x02	; 2
    10ba:	51 05       	cpc	r21, r1
    10bc:	b9 f1       	breq	.+110    	; 0x112c <GPIO_ReadPin+0xc6>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_ReadPin+0x64>
    10c8:	49 c0       	rjmp	.+146    	; 0x115c <GPIO_ReadPin+0xf6>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    10cc:	e9 e3       	ldi	r30, 0x39	; 57
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_ReadPin+0x7e>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_ReadPin+0x7a>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	90 70       	andi	r25, 0x00	; 0
    10ee:	88 23       	and	r24, r24
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	49 c0       	rjmp	.+146    	; 0x118a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10f8:	19 82       	std	Y+1, r1	; 0x01
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    10fc:	e6 e3       	ldi	r30, 0x36	; 54
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_ReadPin+0xae>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_ReadPin+0xaa>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	88 23       	and	r24, r24
    1120:	19 f0       	breq	.+6      	; 0x1128 <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	31 c0       	rjmp	.+98     	; 0x118a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1128:	19 82       	std	Y+1, r1	; 0x01
    112a:	2f c0       	rjmp	.+94     	; 0x118a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    112c:	e3 e3       	ldi	r30, 0x33	; 51
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_ReadPin+0xde>
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_ReadPin+0xda>
    1148:	ca 01       	movw	r24, r20
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	88 23       	and	r24, r24
    1150:	19 f0       	breq	.+6      	; 0x1158 <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	19 c0       	rjmp	.+50     	; 0x118a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	17 c0       	rjmp	.+46     	; 0x118a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_ReadPin+0x10e>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_ReadPin+0x10a>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	90 70       	andi	r25, 0x00	; 0
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	01 c0       	rjmp	.+2      	; 0x118a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1188:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <GPIO_WritePin+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <GPIO_WritePin+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6a 83       	std	Y+2, r22	; 0x02
    11ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <GPIO_WritePin+0x1c>
    11b6:	d5 c0       	rjmp	.+426    	; 0x1362 <GPIO_WritePin+0x1c6>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <GPIO_WritePin+0x24>
    11be:	d1 c0       	rjmp	.+418    	; 0x1362 <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3d 83       	std	Y+5, r19	; 0x05
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <GPIO_WritePin+0x3a>
    11d4:	43 c0       	rjmp	.+134    	; 0x125c <GPIO_WritePin+0xc0>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <GPIO_WritePin+0x4e>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	71 f0       	breq	.+28     	; 0x1204 <GPIO_WritePin+0x68>
    11e8:	bc c0       	rjmp	.+376    	; 0x1362 <GPIO_WritePin+0x1c6>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <GPIO_WritePin+0x5a>
    11f4:	5f c0       	rjmp	.+190    	; 0x12b4 <GPIO_WritePin+0x118>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_WritePin+0x66>
    1200:	85 c0       	rjmp	.+266    	; 0x130c <GPIO_WritePin+0x170>
    1202:	af c0       	rjmp	.+350    	; 0x1362 <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_WritePin+0x8c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_WritePin+0x88>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	98 c0       	rjmp	.+304    	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_WritePin+0xb4>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_WritePin+0xb0>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	83 c0       	rjmp	.+262    	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    1262:	a8 e3       	ldi	r26, 0x38	; 56
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_WritePin+0xe4>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_WritePin+0xe0>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	6c c0       	rjmp	.+216    	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_WritePin+0x10c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_WritePin+0x108>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	57 c0       	rjmp	.+174    	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    12ba:	a5 e3       	ldi	r26, 0x35	; 53
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e3       	ldi	r30, 0x35	; 53
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_WritePin+0x13c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_WritePin+0x138>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	40 c0       	rjmp	.+128    	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_WritePin+0x164>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_WritePin+0x160>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	2b c0       	rjmp	.+86     	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_WritePin+0x194>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_WritePin+0x190>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_WritePin+0x1bc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_WritePin+0x1b8>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_FlipPin+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_FlipPin+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	08 f0       	brcs	.+2      	; 0x138a <GPIO_FlipPin+0x18>
    1388:	72 c0       	rjmp	.+228    	; 0x146e <GPIO_FlipPin+0xfc>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	08 f0       	brcs	.+2      	; 0x1392 <GPIO_FlipPin+0x20>
    1390:	6e c0       	rjmp	.+220    	; 0x146e <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3c 83       	std	Y+4, r19	; 0x04
    139a:	2b 83       	std	Y+3, r18	; 0x03
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	49 f1       	breq	.+82     	; 0x13f8 <GPIO_FlipPin+0x86>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <GPIO_FlipPin+0x48>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <GPIO_FlipPin+0x5e>
    13b8:	5a c0       	rjmp	.+180    	; 0x146e <GPIO_FlipPin+0xfc>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	71 f1       	breq	.+92     	; 0x1420 <GPIO_FlipPin+0xae>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	e9 f1       	breq	.+122    	; 0x1448 <GPIO_FlipPin+0xd6>
    13ce:	4f c0       	rjmp	.+158    	; 0x146e <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_FlipPin+0x7c>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_FlipPin+0x78>
    13f2:	84 27       	eor	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	3b c0       	rjmp	.+118    	; 0x146e <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    13f8:	a8 e3       	ldi	r26, 0x38	; 56
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <GPIO_FlipPin+0xa4>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <GPIO_FlipPin+0xa0>
    141a:	84 27       	eor	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	27 c0       	rjmp	.+78     	; 0x146e <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_FlipPin+0xcc>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_FlipPin+0xc8>
    1442:	84 27       	eor	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	13 c0       	rjmp	.+38     	; 0x146e <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_FlipPin+0xf4>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_FlipPin+0xf0>
    146a:	84 27       	eor	r24, r20
    146c:	8c 93       	st	X, r24
			break;
		}
	}
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <GPIO_SetPortDir+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <GPIO_SetPortDir+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	90 f5       	brcc	.+100    	; 0x14f6 <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3c 83       	std	Y+4, r19	; 0x04
    149a:	2b 83       	std	Y+3, r18	; 0x03
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	d1 f0       	breq	.+52     	; 0x14da <GPIO_SetPortDir+0x5e>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	2c f4       	brge	.+10     	; 0x14ba <GPIO_SetPortDir+0x3e>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	61 f0       	breq	.+24     	; 0x14d0 <GPIO_SetPortDir+0x54>
    14b8:	1e c0       	rjmp	.+60     	; 0x14f6 <GPIO_SetPortDir+0x7a>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <GPIO_SetPortDir+0x68>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	91 05       	cpc	r25, r1
    14cc:	81 f0       	breq	.+32     	; 0x14ee <GPIO_SetPortDir+0x72>
    14ce:	13 c0       	rjmp	.+38     	; 0x14f6 <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    14d0:	ea e3       	ldi	r30, 0x3A	; 58
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 83       	st	Z, r24
    14d8:	0e c0       	rjmp	.+28     	; 0x14f6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    14e4:	e4 e3       	ldi	r30, 0x34	; 52
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	80 83       	st	Z, r24
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    14ee:	e1 e3       	ldi	r30, 0x31	; 49
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <GPIO_ReadPort+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_ReadPort+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1512:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	90 f5       	brcc	.+100    	; 0x157e <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	d1 f0       	breq	.+52     	; 0x1562 <GPIO_ReadPort+0x5e>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <GPIO_ReadPort+0x3e>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	61 f0       	breq	.+24     	; 0x1558 <GPIO_ReadPort+0x54>
    1540:	1e c0       	rjmp	.+60     	; 0x157e <GPIO_ReadPort+0x7a>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	81 f0       	breq	.+32     	; 0x156c <GPIO_ReadPort+0x68>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	81 f0       	breq	.+32     	; 0x1576 <GPIO_ReadPort+0x72>
    1556:	13 c0       	rjmp	.+38     	; 0x157e <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    1558:	e9 e3       	ldi	r30, 0x39	; 57
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	0e c0       	rjmp	.+28     	; 0x157e <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    1562:	e6 e3       	ldi	r30, 0x36	; 54
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	09 c0       	rjmp	.+18     	; 0x157e <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    156c:	e3 e3       	ldi	r30, 0x33	; 51
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	04 c0       	rjmp	.+8      	; 0x157e <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    1576:	e0 e3       	ldi	r30, 0x30	; 48
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <GPIO_WritePort+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_WritePort+0x8>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	90 f5       	brcc	.+100    	; 0x1608 <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	d1 f0       	breq	.+52     	; 0x15ec <GPIO_WritePort+0x5e>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	2c f4       	brge	.+10     	; 0x15cc <GPIO_WritePort+0x3e>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <GPIO_WritePort+0x54>
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <GPIO_WritePort+0x7a>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <GPIO_WritePort+0x68>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <GPIO_WritePort+0x72>
    15e0:	13 c0       	rjmp	.+38     	; 0x1608 <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    15e2:	eb e3       	ldi	r30, 0x3B	; 59
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	80 83       	st	Z, r24
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1600:	e2 e3       	ldi	r30, 0x32	; 50
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
			break;
		}
	}
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_FlipPort+0x6>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	84 30       	cpi	r24, 0x04	; 4
    1628:	08 f0       	brcs	.+2      	; 0x162c <GPIO_FlipPort+0x16>
    162a:	3e c0       	rjmp	.+124    	; 0x16a8 <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3b 83       	std	Y+3, r19	; 0x03
    1634:	2a 83       	std	Y+2, r18	; 0x02
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	e9 f0       	breq	.+58     	; 0x167a <GPIO_FlipPort+0x64>
    1640:	2a 81       	ldd	r18, Y+2	; 0x02
    1642:	3b 81       	ldd	r19, Y+3	; 0x03
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <GPIO_FlipPort+0x3e>
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f0       	breq	.+24     	; 0x166a <GPIO_FlipPort+0x54>
    1652:	2a c0       	rjmp	.+84     	; 0x16a8 <GPIO_FlipPort+0x92>
    1654:	2a 81       	ldd	r18, Y+2	; 0x02
    1656:	3b 81       	ldd	r19, Y+3	; 0x03
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	b1 f0       	breq	.+44     	; 0x168a <GPIO_FlipPort+0x74>
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	9b 81       	ldd	r25, Y+3	; 0x03
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	c9 f0       	breq	.+50     	; 0x169a <GPIO_FlipPort+0x84>
    1668:	1f c0       	rjmp	.+62     	; 0x16a8 <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 95       	com	r24
    1676:	8c 93       	st	X, r24
    1678:	17 c0       	rjmp	.+46     	; 0x16a8 <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    167a:	a8 e3       	ldi	r26, 0x38	; 56
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e8 e3       	ldi	r30, 0x38	; 56
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 95       	com	r24
    1686:	8c 93       	st	X, r24
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    168a:	a5 e3       	ldi	r26, 0x35	; 53
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e3       	ldi	r30, 0x35	; 53
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 95       	com	r24
    1696:	8c 93       	st	X, r24
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    169a:	a2 e3       	ldi	r26, 0x32	; 50
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e2 e3       	ldi	r30, 0x32	; 50
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 95       	com	r24
    16a6:	8c 93       	st	X, r24
			break;
		}
	}
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <GPIO_WriteLowNibble+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <GPIO_WriteLowNibble+0x8>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <GPIO_WriteLowNibble+0x18>
    16ca:	61 c0       	rjmp	.+194    	; 0x178e <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	8f 70       	andi	r24, 0x0F	; 15
    16d0:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	29 f1       	breq	.+74     	; 0x1730 <GPIO_WriteLowNibble+0x7c>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <GPIO_WriteLowNibble+0x46>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	61 f0       	breq	.+24     	; 0x1710 <GPIO_WriteLowNibble+0x5c>
    16f8:	4a c0       	rjmp	.+148    	; 0x178e <GPIO_WriteLowNibble+0xda>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	31 f1       	breq	.+76     	; 0x1750 <GPIO_WriteLowNibble+0x9c>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	89 f1       	breq	.+98     	; 0x1770 <GPIO_WriteLowNibble+0xbc>
    170e:	3f c0       	rjmp	.+126    	; 0x178e <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    1710:	ab e3       	ldi	r26, 0x3B	; 59
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	eb e3       	ldi	r30, 0x3B	; 59
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 7f       	andi	r24, 0xF0	; 240
    171c:	8c 93       	st	X, r24
			PORTA_REG |= value;
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	90 81       	ld	r25, Z
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	89 2b       	or	r24, r25
    172c:	8c 93       	st	X, r24
    172e:	2f c0       	rjmp	.+94     	; 0x178e <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    1730:	a8 e3       	ldi	r26, 0x38	; 56
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 7f       	andi	r24, 0xF0	; 240
    173c:	8c 93       	st	X, r24
			PORTB_REG |= value;
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	90 81       	ld	r25, Z
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	89 2b       	or	r24, r25
    174c:	8c 93       	st	X, r24
    174e:	1f c0       	rjmp	.+62     	; 0x178e <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 7f       	andi	r24, 0xF0	; 240
    175c:	8c 93       	st	X, r24
			PORTC_REG |= value;
    175e:	a5 e3       	ldi	r26, 0x35	; 53
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e3       	ldi	r30, 0x35	; 53
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	90 81       	ld	r25, Z
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	89 2b       	or	r24, r25
    176c:	8c 93       	st	X, r24
    176e:	0f c0       	rjmp	.+30     	; 0x178e <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    1770:	a2 e3       	ldi	r26, 0x32	; 50
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	8c 93       	st	X, r24
			PORTD_REG |= value;
    177e:	a2 e3       	ldi	r26, 0x32	; 50
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	90 81       	ld	r25, Z
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	89 2b       	or	r24, r25
    178c:	8c 93       	st	X, r24
			break;
		}
	}
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <GPIO_WriteHighNibble+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <GPIO_WriteHighNibble+0x8>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <GPIO_WriteHighNibble+0x18>
    17b2:	61 c0       	rjmp	.+194    	; 0x1876 <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 7f       	andi	r24, 0xF0	; 240
    17b8:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3c 83       	std	Y+4, r19	; 0x04
    17c2:	2b 83       	std	Y+3, r18	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	29 f1       	breq	.+74     	; 0x1818 <GPIO_WriteHighNibble+0x7c>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <GPIO_WriteHighNibble+0x46>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 f0       	breq	.+24     	; 0x17f8 <GPIO_WriteHighNibble+0x5c>
    17e0:	4a c0       	rjmp	.+148    	; 0x1876 <GPIO_WriteHighNibble+0xda>
    17e2:	2b 81       	ldd	r18, Y+3	; 0x03
    17e4:	3c 81       	ldd	r19, Y+4	; 0x04
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	31 f1       	breq	.+76     	; 0x1838 <GPIO_WriteHighNibble+0x9c>
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	91 05       	cpc	r25, r1
    17f4:	89 f1       	breq	.+98     	; 0x1858 <GPIO_WriteHighNibble+0xbc>
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    17f8:	ab e3       	ldi	r26, 0x3B	; 59
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e3       	ldi	r30, 0x3B	; 59
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1806:	ab e3       	ldi	r26, 0x3B	; 59
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	eb e3       	ldi	r30, 0x3B	; 59
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	90 81       	ld	r25, Z
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	89 2b       	or	r24, r25
    1814:	8c 93       	st	X, r24
    1816:	2f c0       	rjmp	.+94     	; 0x1876 <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    1818:	a8 e3       	ldi	r26, 0x38	; 56
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 e3       	ldi	r30, 0x38	; 56
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8f 70       	andi	r24, 0x0F	; 15
    1824:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1826:	a8 e3       	ldi	r26, 0x38	; 56
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 e3       	ldi	r30, 0x38	; 56
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	90 81       	ld	r25, Z
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	89 2b       	or	r24, r25
    1834:	8c 93       	st	X, r24
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 70       	andi	r24, 0x0F	; 15
    1844:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1846:	a5 e3       	ldi	r26, 0x35	; 53
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	90 81       	ld	r25, Z
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	89 2b       	or	r24, r25
    1854:	8c 93       	st	X, r24
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    1858:	a2 e3       	ldi	r26, 0x32	; 50
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1866:	a2 e3       	ldi	r26, 0x32	; 50
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e2 e3       	ldi	r30, 0x32	; 50
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	90 81       	ld	r25, Z
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	89 2b       	or	r24, r25
    1874:	8c 93       	st	X, r24
			break;
		}
	}
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <Ultrasonic_init>:
 * 					2. Initialize the ICU driver and Its Call back function.
 * [Args]  : void
 * [RUTURN]: uint16
 */
void Ultrasonic_init(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <Ultrasonic_init+0x6>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_ConfigType Icu_Config = {F_CPU_8, RISING};
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the Trigger pin as output */
	GPIO_SetPinDir(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, pin_output);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	65 e0       	ldi	r22, 0x05	; 5
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_SetPinDir>

	/* Initialize the ICU Driver */
	Icu_init(&Icu_Config);
    18a0:	ce 01       	movw	r24, r28
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	0e 94 82 06 	call	0xd04	; 0xd04 <Icu_init>

	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    18a8:	84 e8       	ldi	r24, 0x84	; 132
    18aa:	9c e0       	ldi	r25, 0x0C	; 12
    18ac:	0e 94 c9 06 	call	0xd92	; 0xd92 <Icu_setCallBack>
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <Ultrasonic_readDistance>:
 * 					5. Calculate the distance in Centimeter value
 * [Args]  : void
 * [RUTURN]: uint16
 */
uint16 Ultrasonic_readDistance(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance = 0;
    18c2:	10 92 7f 00 	sts	0x007F, r1
	g_edgeCount = 0;
    18c6:	10 92 7c 00 	sts	0x007C, r1
	g_timeHigh = 0;
    18ca:	10 92 7e 00 	sts	0x007E, r1
    18ce:	10 92 7d 00 	sts	0x007D, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Icu_clearTimerValue();
    18d2:	0e 94 05 07 	call	0xe0a	; 0xe0a <Icu_clearTimerValue>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    18d6:	0e 94 a7 0c 	call	0x194e	; 0x194e <Ultrasonic_Trigger>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    18da:	80 91 7c 00 	lds	r24, 0x007C
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	e1 f7       	brne	.-8      	; 0x18da <Ultrasonic_readDistance+0x20>
	 *
	 * distance = 17150 x (TIMER value) x 1 x 10^-6 cm
	 *			= 0.01715 x (TIMER value) cm
	 *			= (TIMER value) / 58.8 cm or (TIMER value) * 0.01715 cm
	*/
	g_distance = g_timeHigh / 58;
    18e2:	80 91 7d 00 	lds	r24, 0x007D
    18e6:	90 91 7e 00 	lds	r25, 0x007E
    18ea:	2a e3       	ldi	r18, 0x3A	; 58
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	b9 01       	movw	r22, r18
    18f0:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodhi4>
    18f4:	cb 01       	movw	r24, r22
    18f6:	80 93 7f 00 	sts	0x007F, r24

	return g_distance;
    18fa:	80 91 7f 00 	lds	r24, 0x007F
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Ultrasonic_edgeProcessing>:
 * [DISCRIPTION]  : Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 * [Args]  : void
 * [RUTURN]: void
 */
static void Ultrasonic_edgeProcessing(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1910:	80 91 7c 00 	lds	r24, 0x007C
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	80 93 7c 00 	sts	0x007C, r24
	if(g_edgeCount == 1)
    191a:	80 91 7c 00 	lds	r24, 0x007C
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	31 f4       	brne	.+12     	; 0x192e <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    1922:	0e 94 05 07 	call	0xe0a	; 0xe0a <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Icu_setEdgeDetectionType>
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    192e:	80 91 7c 00 	lds	r24, 0x007C
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	49 f4       	brne	.+18     	; 0x1948 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
    1936:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <Icu_getInputCaptureValue>
    193a:	90 93 7e 00 	sts	0x007E, r25
    193e:	80 93 7d 00 	sts	0x007D, r24
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Icu_setEdgeDetectionType>
	}
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <Ultrasonic_Trigger>:
 * [DISCRIPTION]  : Function send trigger pulse for Ultrasonic sensor to start measurements
 * [Args]  : void
 * [RUTURN]: void
 */
static void Ultrasonic_Trigger(void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	68 97       	sbiw	r28, 0x18	; 24
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	GPIO_WritePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	65 e0       	ldi	r22, 0x05	; 5
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e2       	ldi	r26, 0x20	; 32
    1972:	b1 e4       	ldi	r27, 0x41	; 65
    1974:	8d 8b       	std	Y+21, r24	; 0x15
    1976:	9e 8b       	std	Y+22, r25	; 0x16
    1978:	af 8b       	std	Y+23, r26	; 0x17
    197a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	2b ea       	ldi	r18, 0xAB	; 171
    1986:	3a ea       	ldi	r19, 0xAA	; 170
    1988:	4a e2       	ldi	r20, 0x2A	; 42
    198a:	50 e4       	ldi	r21, 0x40	; 64
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	89 8b       	std	Y+17, r24	; 0x11
    1996:	9a 8b       	std	Y+18, r25	; 0x12
    1998:	ab 8b       	std	Y+19, r26	; 0x13
    199a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    199c:	69 89       	ldd	r22, Y+17	; 0x11
    199e:	7a 89       	ldd	r23, Y+18	; 0x12
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	1c f4       	brge	.+6      	; 0x19ba <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	88 8b       	std	Y+16, r24	; 0x10
    19b8:	91 c0       	rjmp	.+290    	; 0x1adc <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    19ba:	69 89       	ldd	r22, Y+17	; 0x11
    19bc:	7a 89       	ldd	r23, Y+18	; 0x12
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	53 e4       	ldi	r21, 0x43	; 67
    19ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	0c f0       	brlt	.+2      	; 0x19d4 <Ultrasonic_Trigger+0x86>
    19d2:	7b c0       	rjmp	.+246    	; 0x1aca <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a e7       	ldi	r20, 0x7A	; 122
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8c 87       	std	Y+12, r24	; 0x0c
    19ee:	9d 87       	std	Y+13, r25	; 0x0d
    19f0:	ae 87       	std	Y+14, r26	; 0x0e
    19f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    19f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    19f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    19fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	88 87       	std	Y+8, r24	; 0x08
    1a0e:	99 87       	std	Y+9, r25	; 0x09
    1a10:	aa 87       	std	Y+10, r26	; 0x0a
    1a12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a14:	68 85       	ldd	r22, Y+8	; 0x08
    1a16:	79 85       	ldd	r23, Y+9	; 0x09
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9f 83       	std	Y+7, r25	; 0x07
    1a32:	8e 83       	std	Y+6, r24	; 0x06
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1a36:	68 85       	ldd	r22, Y+8	; 0x08
    1a38:	79 85       	ldd	r23, Y+9	; 0x09
    1a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a50:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9f 83       	std	Y+7, r25	; 0x07
    1a74:	8e 83       	std	Y+6, r24	; 0x06
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <Ultrasonic_Trigger+0x148>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9d 83       	std	Y+5, r25	; 0x05
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <Ultrasonic_Trigger+0x136>
    1a88:	9d 83       	std	Y+5, r25	; 0x05
    1a8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9f 83       	std	Y+7, r25	; 0x07
    1a94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8e 81       	ldd	r24, Y+6	; 0x06
    1a98:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <Ultrasonic_Trigger+0x12a>
    1a9e:	24 c0       	rjmp	.+72     	; 0x1ae8 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	68 85       	ldd	r22, Y+8	; 0x08
    1aa2:	79 85       	ldd	r23, Y+9	; 0x09
    1aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9f 83       	std	Y+7, r25	; 0x07
    1ab2:	8e 83       	std	Y+6, r24	; 0x06
    1ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab8:	9b 83       	std	Y+3, r25	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <Ultrasonic_Trigger+0x172>
    1ac4:	9b 83       	std	Y+3, r25	; 0x03
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aca:	69 89       	ldd	r22, Y+17	; 0x11
    1acc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ace:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	88 8b       	std	Y+16, r24	; 0x10
    1adc:	88 89       	ldd	r24, Y+16	; 0x10
    1ade:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	8a 95       	dec	r24
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <Ultrasonic_Trigger+0x194>
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_WritePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	65 e0       	ldi	r22, 0x05	; 5
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
}
    1af2:	68 96       	adiw	r28, 0x18	; 24
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LCD_init>:
  	  	  	 2. Setup the LCD Data Mode 4-bits or 8-bits.
 [Args]: void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_init(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_SetPinDir(LCD_RS_PORT_ID, LCD_RS_PIN_ID, pin_output);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_RW_PORT_ID, LCD_RW_PIN_ID, pin_output);
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_E_PORT_ID, LCD_E_PIN_ID, pin_output);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_SetPinDir>
	/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_SetPortDir(LCD_DATA_PORT_ID, port_output);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	6f ef       	ldi	r22, 0xFF	; 255
    1b2e:	0e 94 3e 0a 	call	0x147c	; 0x147c <GPIO_SetPortDir>
	 /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b32:	88 e3       	ldi	r24, 0x38	; 56
    1b34:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_sendCommand>
#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    1b38:	8c e0       	ldi	r24, 0x0C	; 12
    1b3a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_sendCommand>
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <LCD_sendCommand>:
 [DISCRIPTION]:	Send the required command to the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	ea 97       	sbiw	r28, 0x3a	; 58
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1b60:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	8d ab       	std	Y+53, r24	; 0x35
    1b80:	9e ab       	std	Y+54, r25	; 0x36
    1b82:	af ab       	std	Y+55, r26	; 0x37
    1b84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	6d a9       	ldd	r22, Y+53	; 0x35
    1b88:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	89 ab       	std	Y+49, r24	; 0x31
    1ba0:	9a ab       	std	Y+50, r25	; 0x32
    1ba2:	ab ab       	std	Y+51, r26	; 0x33
    1ba4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba8:	7a a9       	ldd	r23, Y+50	; 0x32
    1baa:	8b a9       	ldd	r24, Y+51	; 0x33
    1bac:	9c a9       	ldd	r25, Y+52	; 0x34
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	98 ab       	std	Y+48, r25	; 0x30
    1bc4:	8f a7       	std	Y+47, r24	; 0x2f
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1bc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bca:	7a a9       	ldd	r23, Y+50	; 0x32
    1bcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bce:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	6d a9       	ldd	r22, Y+53	; 0x35
    1be2:	7e a9       	ldd	r23, Y+54	; 0x36
    1be4:	8f a9       	ldd	r24, Y+55	; 0x37
    1be6:	98 ad       	ldd	r25, Y+56	; 0x38
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	98 ab       	std	Y+48, r25	; 0x30
    1c06:	8f a7       	std	Y+47, r24	; 0x2f
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_sendCommand+0xde>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9e a7       	std	Y+46, r25	; 0x2e
    1c10:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0xcc>
    1c1a:	9e a7       	std	Y+46, r25	; 0x2e
    1c1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_sendCommand+0xc0>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	98 ab       	std	Y+48, r25	; 0x30
    1c44:	8f a7       	std	Y+47, r24	; 0x2f
    1c46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c48:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4a:	9c a7       	std	Y+44, r25	; 0x2c
    1c4c:	8b a7       	std	Y+43, r24	; 0x2b
    1c4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x108>
    1c56:	9c a7       	std	Y+44, r25	; 0x2c
    1c58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	8f a3       	std	Y+39, r24	; 0x27
    1c6e:	98 a7       	std	Y+40, r25	; 0x28
    1c70:	a9 a7       	std	Y+41, r26	; 0x29
    1c72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6f a1       	ldd	r22, Y+39	; 0x27
    1c76:	78 a5       	ldd	r23, Y+40	; 0x28
    1c78:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8b a3       	std	Y+35, r24	; 0x23
    1c8e:	9c a3       	std	Y+36, r25	; 0x24
    1c90:	ad a3       	std	Y+37, r26	; 0x25
    1c92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c94:	6b a1       	ldd	r22, Y+35	; 0x23
    1c96:	7c a1       	ldd	r23, Y+36	; 0x24
    1c98:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9a a3       	std	Y+34, r25	; 0x22
    1cb2:	89 a3       	std	Y+33, r24	; 0x21
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1cb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cba:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9a a3       	std	Y+34, r25	; 0x22
    1cf4:	89 a3       	std	Y+33, r24	; 0x21
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_sendCommand+0x1cc>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	98 a3       	std	Y+32, r25	; 0x20
    1cfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1d00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d02:	98 a1       	ldd	r25, Y+32	; 0x20
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x1ba>
    1d08:	98 a3       	std	Y+32, r25	; 0x20
    1d0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9a a3       	std	Y+34, r25	; 0x22
    1d14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	89 a1       	ldd	r24, Y+33	; 0x21
    1d18:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_sendCommand+0x1ae>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6b a1       	ldd	r22, Y+35	; 0x23
    1d22:	7c a1       	ldd	r23, Y+36	; 0x24
    1d24:	8d a1       	ldd	r24, Y+37	; 0x25
    1d26:	9e a1       	ldd	r25, Y+38	; 0x26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9a a3       	std	Y+34, r25	; 0x22
    1d32:	89 a3       	std	Y+33, r24	; 0x21
    1d34:	89 a1       	ldd	r24, Y+33	; 0x21
    1d36:	9a a1       	ldd	r25, Y+34	; 0x22
    1d38:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x1f6>
    1d44:	9e 8f       	std	Y+30, r25	; 0x1e
    1d46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d4c:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_WritePort>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e8       	ldi	r26, 0x80	; 128
    1d56:	bf e3       	ldi	r27, 0x3F	; 63
    1d58:	89 8f       	std	Y+25, r24	; 0x19
    1d5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	69 8d       	ldd	r22, Y+25	; 0x19
    1d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8d 8b       	std	Y+21, r24	; 0x15
    1d7a:	9e 8b       	std	Y+22, r25	; 0x16
    1d7c:	af 8b       	std	Y+23, r26	; 0x17
    1d7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <LCD_sendCommand+0x258>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_sendCommand+0x2b8>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	89 8b       	std	Y+17, r24	; 0x11
    1dec:	89 89       	ldd	r24, Y+17	; 0x11
    1dee:	9a 89       	ldd	r25, Y+18	; 0x12
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_sendCommand+0x2a6>
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	9c 89       	ldd	r25, Y+20	; 0x14
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <LCD_sendCommand+0x29a>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e10:	8f 89       	ldd	r24, Y+23	; 0x17
    1e12:	98 8d       	ldd	r25, Y+24	; 0x18
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	8b 89       	ldd	r24, Y+19	; 0x13
    1e22:	9c 89       	ldd	r25, Y+20	; 0x14
    1e24:	98 8b       	std	Y+16, r25	; 0x10
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	98 89       	ldd	r25, Y+16	; 0x10
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_sendCommand+0x2e2>
    1e30:	98 8b       	std	Y+16, r25	; 0x10
    1e32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	8b 87       	std	Y+11, r24	; 0x0b
    1e48:	9c 87       	std	Y+12, r25	; 0x0c
    1e4a:	ad 87       	std	Y+13, r26	; 0x0d
    1e4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a ef       	ldi	r20, 0xFA	; 250
    1e5c:	54 e4       	ldi	r21, 0x44	; 68
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	8f 83       	std	Y+7, r24	; 0x07
    1e68:	98 87       	std	Y+8, r25	; 0x08
    1e6a:	a9 87       	std	Y+9, r26	; 0x09
    1e6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <LCD_sendCommand+0x346>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	3f c0       	rjmp	.+126    	; 0x1f0e <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	4c f5       	brge	.+82     	; 0x1efa <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e2       	ldi	r20, 0x20	; 32
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <LCD_sendCommand+0x3a6>
    1ed2:	88 ec       	ldi	r24, 0xC8	; 200
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0x394>
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <LCD_sendCommand+0x388>
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0x3d0>
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f22:	ea 96       	adiw	r28, 0x3a	; 58
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <LCD_displayCharacter>:
 [DISCRIPTION]:	Display the required character on the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayCharacter(uint8 data)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	ea 97       	sbiw	r28, 0x3a	; 58
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1f4a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e8       	ldi	r26, 0x80	; 128
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	8d ab       	std	Y+53, r24	; 0x35
    1f6a:	9e ab       	std	Y+54, r25	; 0x36
    1f6c:	af ab       	std	Y+55, r26	; 0x37
    1f6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6d a9       	ldd	r22, Y+53	; 0x35
    1f72:	7e a9       	ldd	r23, Y+54	; 0x36
    1f74:	8f a9       	ldd	r24, Y+55	; 0x37
    1f76:	98 ad       	ldd	r25, Y+56	; 0x38
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	89 ab       	std	Y+49, r24	; 0x31
    1f8a:	9a ab       	std	Y+50, r25	; 0x32
    1f8c:	ab ab       	std	Y+51, r26	; 0x33
    1f8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f90:	69 a9       	ldd	r22, Y+49	; 0x31
    1f92:	7a a9       	ldd	r23, Y+50	; 0x32
    1f94:	8b a9       	ldd	r24, Y+51	; 0x33
    1f96:	9c a9       	ldd	r25, Y+52	; 0x34
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6d a9       	ldd	r22, Y+53	; 0x35
    1fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fce:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	98 ab       	std	Y+48, r25	; 0x30
    1ff0:	8f a7       	std	Y+47, r24	; 0x2f
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_displayCharacter+0xde>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e a7       	std	Y+46, r25	; 0x2e
    1ffa:	8d a7       	std	Y+45, r24	; 0x2d
    1ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_displayCharacter+0xcc>
    2004:	9e a7       	std	Y+46, r25	; 0x2e
    2006:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8f a5       	ldd	r24, Y+47	; 0x2f
    200a:	98 a9       	ldd	r25, Y+48	; 0x30
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8f a5       	ldd	r24, Y+47	; 0x2f
    2014:	98 a9       	ldd	r25, Y+48	; 0x30
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_displayCharacter+0xc0>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	69 a9       	ldd	r22, Y+49	; 0x31
    201e:	7a a9       	ldd	r23, Y+50	; 0x32
    2020:	8b a9       	ldd	r24, Y+51	; 0x33
    2022:	9c a9       	ldd	r25, Y+52	; 0x34
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	9c a7       	std	Y+44, r25	; 0x2c
    2036:	8b a7       	std	Y+43, r24	; 0x2b
    2038:	8b a5       	ldd	r24, Y+43	; 0x2b
    203a:	9c a5       	ldd	r25, Y+44	; 0x2c
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_displayCharacter+0x108>
    2040:	9c a7       	std	Y+44, r25	; 0x2c
    2042:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e8       	ldi	r26, 0x80	; 128
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	8f a3       	std	Y+39, r24	; 0x27
    2058:	98 a7       	std	Y+40, r25	; 0x28
    205a:	a9 a7       	std	Y+41, r26	; 0x29
    205c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6f a1       	ldd	r22, Y+39	; 0x27
    2060:	78 a5       	ldd	r23, Y+40	; 0x28
    2062:	89 a5       	ldd	r24, Y+41	; 0x29
    2064:	9a a5       	ldd	r25, Y+42	; 0x2a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8b a3       	std	Y+35, r24	; 0x23
    2078:	9c a3       	std	Y+36, r25	; 0x24
    207a:	ad a3       	std	Y+37, r26	; 0x25
    207c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ba:	78 a5       	ldd	r23, Y+40	; 0x28
    20bc:	89 a5       	ldd	r24, Y+41	; 0x29
    20be:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_displayCharacter+0x1cc>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	98 a3       	std	Y+32, r25	; 0x20
    20e8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ec:	98 a1       	ldd	r25, Y+32	; 0x20
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_displayCharacter+0x1ba>
    20f2:	98 a3       	std	Y+32, r25	; 0x20
    20f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	89 a1       	ldd	r24, Y+33	; 0x21
    20f8:	9a a1       	ldd	r25, Y+34	; 0x22
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	89 a1       	ldd	r24, Y+33	; 0x21
    2102:	9a a1       	ldd	r25, Y+34	; 0x22
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_displayCharacter+0x1ae>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6b a1       	ldd	r22, Y+35	; 0x23
    210c:	7c a1       	ldd	r23, Y+36	; 0x24
    210e:	8d a1       	ldd	r24, Y+37	; 0x25
    2110:	9e a1       	ldd	r25, Y+38	; 0x26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d
    2126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_displayCharacter+0x1f6>
    212e:	9e 8f       	std	Y+30, r25	; 0x1e
    2130:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	6a ad       	ldd	r22, Y+58	; 0x3a
    2136:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_WritePort>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e8       	ldi	r26, 0x80	; 128
    2140:	bf e3       	ldi	r27, 0x3F	; 63
    2142:	89 8f       	std	Y+25, r24	; 0x19
    2144:	9a 8f       	std	Y+26, r25	; 0x1a
    2146:	ab 8f       	std	Y+27, r26	; 0x1b
    2148:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	69 8d       	ldd	r22, Y+25	; 0x19
    214c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a ef       	ldi	r20, 0xFA	; 250
    2158:	54 e4       	ldi	r21, 0x44	; 68
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8d 8b       	std	Y+21, r24	; 0x15
    2164:	9e 8b       	std	Y+22, r25	; 0x16
    2166:	af 8b       	std	Y+23, r26	; 0x17
    2168:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_displayCharacter+0x258>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	3f c0       	rjmp	.+126    	; 0x220a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_displayCharacter+0x2b8>
    21ce:	88 ec       	ldi	r24, 0xC8	; 200
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	9a 89       	ldd	r25, Y+18	; 0x12
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_displayCharacter+0x2a6>
    21de:	9a 8b       	std	Y+18, r25	; 0x12
    21e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_displayCharacter+0x29a>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	8b 89       	ldd	r24, Y+19	; 0x13
    220c:	9c 89       	ldd	r25, Y+20	; 0x14
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
    2212:	8f 85       	ldd	r24, Y+15	; 0x0f
    2214:	98 89       	ldd	r25, Y+16	; 0x10
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_displayCharacter+0x2e2>
    221a:	98 8b       	std	Y+16, r25	; 0x10
    221c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_WritePin>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e8       	ldi	r26, 0x80	; 128
    222e:	bf e3       	ldi	r27, 0x3F	; 63
    2230:	8b 87       	std	Y+11, r24	; 0x0b
    2232:	9c 87       	std	Y+12, r25	; 0x0c
    2234:	ad 87       	std	Y+13, r26	; 0x0d
    2236:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6b 85       	ldd	r22, Y+11	; 0x0b
    223a:	7c 85       	ldd	r23, Y+12	; 0x0c
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8f 83       	std	Y+7, r24	; 0x07
    2252:	98 87       	std	Y+8, r25	; 0x08
    2254:	a9 87       	std	Y+9, r26	; 0x09
    2256:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_displayCharacter+0x346>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_displayCharacter+0x3a6>
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_displayCharacter+0x394>
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_displayCharacter+0x388>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_displayCharacter+0x3d0>
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    230c:	ea 96       	adiw	r28, 0x3a	; 58
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LCD_displayString>:
 [DISCRIPTION]:	Display the required string on the screen
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <LCD_displayString+0x6>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	0a c0       	rjmp	.+20     	; 0x2342 <LCD_displayString+0x24>
	while((*Str) != '\0')

	{
		LCD_displayCharacter(*Str);
    232e:	e9 81       	ldd	r30, Y+1	; 0x01
    2330:	fa 81       	ldd	r31, Y+2	; 0x02
    2332:	80 81       	ld	r24, Z
    2334:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_displayCharacter>
		Str++;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	80 81       	ld	r24, Z
    2348:	88 23       	and	r24, r24
    234a:	89 f7       	brne	.-30     	; 0x232e <LCD_displayString+0x10>

	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_moveCursor>:
 [DISCRIPTION]:	Move the cursor to a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <LCD_moveCursor+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <LCD_moveCursor+0x8>
    235e:	0f 92       	push	r0
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3d 83       	std	Y+5, r19	; 0x05
    2370:	2c 83       	std	Y+4, r18	; 0x04
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
    2374:	9d 81       	ldd	r25, Y+5	; 0x05
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	c1 f0       	breq	.+48     	; 0x23ac <LCD_moveCursor+0x56>
    237c:	2c 81       	ldd	r18, Y+4	; 0x04
    237e:	3d 81       	ldd	r19, Y+5	; 0x05
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_moveCursor+0x3a>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	61 f0       	breq	.+24     	; 0x23a6 <LCD_moveCursor+0x50>
    238e:	19 c0       	rjmp	.+50     	; 0x23c2 <LCD_moveCursor+0x6c>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	69 f0       	breq	.+26     	; 0x23b4 <LCD_moveCursor+0x5e>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	61 f0       	breq	.+24     	; 0x23bc <LCD_moveCursor+0x66>
    23a4:	0e c0       	rjmp	.+28     	; 0x23c2 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	80 5c       	subi	r24, 0xC0	; 192
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	07 c0       	rjmp	.+14     	; 0x23c2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	80 5f       	subi	r24, 0xF0	; 240
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	80 5b       	subi	r24, 0xB0	; 176
    23c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default: ;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	80 68       	ori	r24, 0x80	; 128
    23c6:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_sendCommand>
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LCD_displayStringRowColumn>:
 [DISCRIPTION]:	Display the required string in a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <LCD_displayStringRowColumn+0x6>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <LCD_displayStringRowColumn+0x8>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	6a 83       	std	Y+2, r22	; 0x02
    23ea:	5c 83       	std	Y+4, r21	; 0x04
    23ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	6a 81       	ldd	r22, Y+2	; 0x02
    23f2:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_displayString>
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_intgerToString>:
 [DISCRIPTION]:	Display the required decimal value on the screen
  [Args]:  uint832
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_intgerToString(int data)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	62 97       	sbiw	r28, 0x12	; 18
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	9a 8b       	std	Y+18, r25	; 0x12
    2422:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2424:	89 89       	ldd	r24, Y+17	; 0x11
    2426:	9a 89       	ldd	r25, Y+18	; 0x12
    2428:	9e 01       	movw	r18, r28
    242a:	2f 5f       	subi	r18, 0xFF	; 255
    242c:	3f 4f       	sbci	r19, 0xFF	; 255
    242e:	b9 01       	movw	r22, r18
    2430:	4a e0       	ldi	r20, 0x0A	; 10
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	0e 94 c1 12 	call	0x2582	; 0x2582 <itoa>
	LCD_displayString(buff); /* Display the string */
    2438:	ce 01       	movw	r24, r28
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_displayString>
}
    2440:	62 96       	adiw	r28, 0x12	; 18
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <LCD_clearScreen>:
 [DISCRIPTION]:	Send the clear screen command
  [Args]:  void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_clearScreen(void)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_sendCommand>
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <applicationInit>:
 [Description]:	This function is responsible to Initialize the Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void applicationInit(void)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt I-Bit */
	GI_Enable();
    246e:	0e 94 2c 07 	call	0xe58	; 0xe58 <GI_Enable>

	/* Initialize the LCD driver */
	LCD_init();
    2472:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_init>

	/* Initialize the Ultrasonic driver */
	Ultrasonic_init();
    2476:	0e 94 42 0c 	call	0x1884	; 0x1884 <Ultrasonic_init>

	/* Display this string "Distance =    cm" only once on LCD at the first row*/
	LCD_moveCursor(0, 0);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_moveCursor>
	LCD_displayString("Distance =    cm");
    2482:	80 e6       	ldi	r24, 0x60	; 96
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_displayString>

}
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <applicationStart>:
 [Description]:	This function is responsible to Start the Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void applicationStart(void)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <applicationStart+0x6>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
	uint16 distance = 0;
    249a:	1a 82       	std	Y+2, r1	; 0x02
    249c:	19 82       	std	Y+1, r1	; 0x01

	/* continuously reading the distance measured by the ultra-sonic */
	distance = Ultrasonic_readDistance();
    249e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Ultrasonic_readDistance>
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(0, 11);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	6b e0       	ldi	r22, 0x0B	; 11
    24aa:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_moveCursor>
	/* Represent the distance on LCD */
	if(distance >= 100)
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	84 36       	cpi	r24, 0x64	; 100
    24b4:	91 05       	cpc	r25, r1
    24b6:	28 f0       	brcs	.+10     	; 0x24c2 <applicationStart+0x32>
	{
		LCD_intgerToString(distance);
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_intgerToString>
    24c0:	07 c0       	rjmp	.+14     	; 0x24d0 <applicationStart+0x40>
	}
	else
	{
		LCD_intgerToString(distance);
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_intgerToString>
		/* In case the distance is two, or one number
		 * Print a space after the value to overwrite the previous digit in this location if existed
		 */
		LCD_displayCharacter(' ');
    24ca:	80 e2       	ldi	r24, 0x20	; 32
    24cc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_displayCharacter>
	}

}
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <main>:
/*------------------------------------------------------------------------------
 *                               Main Function
 *------------------------------------------------------------------------------*/

int main(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
	applicationInit();
    24e2:	0e 94 33 12 	call	0x2466	; 0x2466 <applicationInit>

	while(1)
	{
		applicationStart();
    24e6:	0e 94 48 12 	call	0x2490	; 0x2490 <applicationStart>
    24ea:	fd cf       	rjmp	.-6      	; 0x24e6 <main+0xc>

000024ec <__udivmodhi4>:
    24ec:	aa 1b       	sub	r26, r26
    24ee:	bb 1b       	sub	r27, r27
    24f0:	51 e1       	ldi	r21, 0x11	; 17
    24f2:	07 c0       	rjmp	.+14     	; 0x2502 <__udivmodhi4_ep>

000024f4 <__udivmodhi4_loop>:
    24f4:	aa 1f       	adc	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	a6 17       	cp	r26, r22
    24fa:	b7 07       	cpc	r27, r23
    24fc:	10 f0       	brcs	.+4      	; 0x2502 <__udivmodhi4_ep>
    24fe:	a6 1b       	sub	r26, r22
    2500:	b7 0b       	sbc	r27, r23

00002502 <__udivmodhi4_ep>:
    2502:	88 1f       	adc	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	5a 95       	dec	r21
    2508:	a9 f7       	brne	.-22     	; 0x24f4 <__udivmodhi4_loop>
    250a:	80 95       	com	r24
    250c:	90 95       	com	r25
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	08 95       	ret

00002514 <__prologue_saves__>:
    2514:	2f 92       	push	r2
    2516:	3f 92       	push	r3
    2518:	4f 92       	push	r4
    251a:	5f 92       	push	r5
    251c:	6f 92       	push	r6
    251e:	7f 92       	push	r7
    2520:	8f 92       	push	r8
    2522:	9f 92       	push	r9
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	ca 1b       	sub	r28, r26
    253e:	db 0b       	sbc	r29, r27
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	09 94       	ijmp

0000254c <__epilogue_restores__>:
    254c:	2a 88       	ldd	r2, Y+18	; 0x12
    254e:	39 88       	ldd	r3, Y+17	; 0x11
    2550:	48 88       	ldd	r4, Y+16	; 0x10
    2552:	5f 84       	ldd	r5, Y+15	; 0x0f
    2554:	6e 84       	ldd	r6, Y+14	; 0x0e
    2556:	7d 84       	ldd	r7, Y+13	; 0x0d
    2558:	8c 84       	ldd	r8, Y+12	; 0x0c
    255a:	9b 84       	ldd	r9, Y+11	; 0x0b
    255c:	aa 84       	ldd	r10, Y+10	; 0x0a
    255e:	b9 84       	ldd	r11, Y+9	; 0x09
    2560:	c8 84       	ldd	r12, Y+8	; 0x08
    2562:	df 80       	ldd	r13, Y+7	; 0x07
    2564:	ee 80       	ldd	r14, Y+6	; 0x06
    2566:	fd 80       	ldd	r15, Y+5	; 0x05
    2568:	0c 81       	ldd	r16, Y+4	; 0x04
    256a:	1b 81       	ldd	r17, Y+3	; 0x03
    256c:	aa 81       	ldd	r26, Y+2	; 0x02
    256e:	b9 81       	ldd	r27, Y+1	; 0x01
    2570:	ce 0f       	add	r28, r30
    2572:	d1 1d       	adc	r29, r1
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	ed 01       	movw	r28, r26
    2580:	08 95       	ret

00002582 <itoa>:
    2582:	fb 01       	movw	r30, r22
    2584:	9f 01       	movw	r18, r30
    2586:	e8 94       	clt
    2588:	42 30       	cpi	r20, 0x02	; 2
    258a:	c4 f0       	brlt	.+48     	; 0x25bc <itoa+0x3a>
    258c:	45 32       	cpi	r20, 0x25	; 37
    258e:	b4 f4       	brge	.+44     	; 0x25bc <itoa+0x3a>
    2590:	4a 30       	cpi	r20, 0x0A	; 10
    2592:	29 f4       	brne	.+10     	; 0x259e <itoa+0x1c>
    2594:	97 fb       	bst	r25, 7
    2596:	1e f4       	brtc	.+6      	; 0x259e <itoa+0x1c>
    2598:	90 95       	com	r25
    259a:	81 95       	neg	r24
    259c:	9f 4f       	sbci	r25, 0xFF	; 255
    259e:	64 2f       	mov	r22, r20
    25a0:	77 27       	eor	r23, r23
    25a2:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodhi4>
    25a6:	80 5d       	subi	r24, 0xD0	; 208
    25a8:	8a 33       	cpi	r24, 0x3A	; 58
    25aa:	0c f0       	brlt	.+2      	; 0x25ae <itoa+0x2c>
    25ac:	89 5d       	subi	r24, 0xD9	; 217
    25ae:	81 93       	st	Z+, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	a1 f7       	brne	.-24     	; 0x259e <itoa+0x1c>
    25b6:	16 f4       	brtc	.+4      	; 0x25bc <itoa+0x3a>
    25b8:	5d e2       	ldi	r21, 0x2D	; 45
    25ba:	51 93       	st	Z+, r21
    25bc:	10 82       	st	Z, r1
    25be:	c9 01       	movw	r24, r18
    25c0:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <strrev>

000025c4 <strrev>:
    25c4:	dc 01       	movw	r26, r24
    25c6:	fc 01       	movw	r30, r24
    25c8:	67 2f       	mov	r22, r23
    25ca:	71 91       	ld	r23, Z+
    25cc:	77 23       	and	r23, r23
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <strrev+0x4>
    25d0:	32 97       	sbiw	r30, 0x02	; 2
    25d2:	04 c0       	rjmp	.+8      	; 0x25dc <strrev+0x18>
    25d4:	7c 91       	ld	r23, X
    25d6:	6d 93       	st	X+, r22
    25d8:	70 83       	st	Z, r23
    25da:	62 91       	ld	r22, -Z
    25dc:	ae 17       	cp	r26, r30
    25de:	bf 07       	cpc	r27, r31
    25e0:	c8 f3       	brcs	.-14     	; 0x25d4 <strrev+0x10>
    25e2:	08 95       	ret

000025e4 <_exit>:
    25e4:	f8 94       	cli

000025e6 <__stop_program>:
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <__stop_program>
